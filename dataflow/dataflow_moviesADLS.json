{
	"name": "dataflow_moviesADLS",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "csx_ADLS_nabila_moviesADLS",
						"type": "DatasetReference"
					},
					"name": "source1",
					"description": "Import data from csv_ADLS_nabila_moviesADLS"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CSV_Ratings",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "window1"
				},
				{
					"name": "AggregateRatings"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"select1 filter(toInteger(year) > 1950) ~> filter1",
				"filter1 derive(PrimaryGenre = iif(locate('|', genres)>1,left(genres,locate('|',genres)-1),genres),",
				"          year = year) ~> derivedColumn1",
				"source1 select(mapColumn(",
				"          movie,",
				"          title,",
				"          genres,",
				"          year,",
				"          Rating,",
				"          {Rotten Tomato} = {Rotton Tomato}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn1 window(over(PrimaryGenre,",
				"          year),",
				"     asc({Rotten Tomato}, true),",
				"     RatingsRank = rank()) ~> window1",
				"window1 aggregate(groupBy(PrimaryGenre,",
				"          year),",
				"     AverageRatings = avg(toInteger({Rotten Tomato})),",
				"          HighestRated = first(title),",
				"          LowestRated = last(title),",
				"          NumberOfMovies = count()) ~> AggregateRatings",
				"AggregateRatings alterRow(upsertIf(true())) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BusinessEntityID as string,",
				"          NationalIDNumber as string,",
				"          LoginID as string,",
				"          OrganizationNode as string,",
				"          OrganizationLevel as string,",
				"          JobTitle as string,",
				"          BirthDate as string,",
				"          MaritalStatus as string,",
				"          Gender as string,",
				"          HireDate as string,",
				"          SalariedFlag as string,",
				"          VacationHours as string,",
				"          SickLeaveHours as string,",
				"          CurrentFlag as string,",
				"          rowguid as string,",
				"          ModifiedDate as string",
				"     ),",
				"     partitionFileNames:['Ratings.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}